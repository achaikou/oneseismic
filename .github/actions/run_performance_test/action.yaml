name: Run performance test
description: Create file, upload file, run performance script, clean up. User is expected to be logged to Azure already

inputs:
  ilines_number:
    description: Dimension 0 - number of ilines
    required: true
  xlines_number:
    description: Dimension 1 - number of xlines
    required: true
  samples_number:
    description: Dimension 2 - number of samples
    required: true
  duration:
    description: Duration of script execution loop (10s, 1m, etc)
    required: true
  vus:
    description: Number of virtual users running the script
    required: true

runs:
  using: "composite"
  steps:
    - name: Set infrastructure parameters
      shell: bash
      run: |
        echo "CONTAINER_REGISTRY=${{ secrets.SETUP_PREFIX }}0containerRegistry.azurecr.io" >> $GITHUB_ENV
        echo "CREATE_CONTAINER_INSTANCE=${{ secrets.SETUP_PREFIX }}-create-file-job" >> $GITHUB_ENV
        echo "UPLOAD_CONTAINER_INSTANCE=${{ secrets.SETUP_PREFIX }}-upload-file-job" >> $GITHUB_ENV
        echo "CLEANUP_CONTAINER_INSTANCE=${{ secrets.SETUP_PREFIX }}-cleanup-files-job" >> $GITHUB_ENV
        echo "STORAGE_LOCATION=${{ secrets.SETUP_PREFIX }}0storage" >> $GITHUB_ENV

      # CI's don't have enough space for large files. So create and upload them in Azure
    - name: Create and upload segy file
      shell: bash
      uses: azure/arm-deploy@v1
      with:
        deploymentName: performanceTests-setup
        resourceGroupName: ${{ secrets.RESOURCE_GROUP }}
        template: tests/performance/setup.bicep
        parameters: setupPrefix=${{ secrets.SETUP_PREFIX }} ilinesNumber=${{ inputs.ilines_number }} xlinesNumber=${{ inputs.xlines_number }} samplesNumber=${{ inputs.samples_number }}

    - name: Print create logs
      shell: bash
      run: |
        az container logs --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ env.CREATE_CONTAINER_INSTANCE }}

    - name: Print upload logs
      shell: bash
      run: |
        guid=$(az container logs --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ env.UPLOAD_CONTAINER_INSTANCE }} )
        echo $guid
        echo "GUID=$guid" >> $GITHUB_ENV

    - name: Set server URL
      shell: bash
      run: |
        serverURL=$(az deployment group show \
          -g ${{ secrets.RESOURCE_GROUP }} \
          -n performanceTests-setup \
          --query properties.outputs.serverURL.value \
          -o tsv
        )
        echo "SERVER_URL=$serverURL" >> $GITHUB_ENV

    - name: Run performance tests
      shell: bash
      env:
        SERVER_URL: ${{ env.SERVER_URL }}
        STORAGE_LOCATION: ${{ env.STORAGE_LOCATION }}
        AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.STORAGE_ACCOUNT_KEY }}
      run: |
        python script.js --vus ${{ inputs.vus }} --duration ${{ inputs.duration }}

    - name: Print stderr
      shell: bash
      run: |
        cat stderr.txt

    - name: Print stdout
      shell: bash
      run: |
        cat stdout.txt

    - name: Print summary
      shell: bash
      run: |
        cat summary.json

    - name: Cleanup created files
      shell: bash
      uses: azure/arm-deploy@v1
      with:
        deploymentName: performanceTests-teardown
        resourceGroupName: ${{ secrets.RESOURCE_GROUP }}
        template: tests/performance/teardown.bicep
        parameters: setupPrefix=${{ secrets.SETUP_PREFIX }}

    - name: Print cleanup logs
      shell: bash
      run: |
        az container logs --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ env.CLEANUP_CONTAINER_INSTANCE }}
